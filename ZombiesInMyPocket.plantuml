@startuml

!theme plain
top to bottom direction
skinparam linetype ortho

class node10 as "Game" {
   current_move_direction: 
   room_item: 
   indoor_tiles: 
   chosen_tile: 
   current_zombies: 
   tiles: 
   can_cower: 
   outdoor_tiles: 
   load: 
   dev_cards: 
   time: 
   state: 
   player: 
   __init__(self, player, time=9, game_map=None, indoor_tiles=None, outdoor_tiles=None, chosen_tile=None,
                 dev_cards=None, state="Starting", current_move_direction=None, can_cower=True): 
   start_game(self): 
   get_game(self): 
   get_player_status(self): 
   get_time(self): 
   load_tiles(self): 
   draw_tile(self, x, y): 
   load_dev_cards(self): 
   move_player(self, x, y): 
   get_tile_at(self, x, y): 
   select_move(self, direction): 
   check_indoor_outdoor_move(self, current_type, move_type): 
   get_destination_coords(self, direction): 
   check_for_door(self, direction): 
   check_for_room(self, x, y): 
   check_doors_align(self, direction): 
   check_entrances_align(self): 
   check_dining_room_has_exit(self): 
   place_tile(self, x, y): 
   get_current_tile(self): 
   rotate(self): 
   trigger_dev_card(self, time): 
   trigger_attack(self, *item): 
   trigger_run(self, direction, health_lost=-1): 
   trigger_room_effect(self, room_name): 
   trigger_cower(self): 
   drop_item(self, old_item): 
   use_item(self, *item): 
   choose_door(self, direction): 
   search_for_totem(self): 
   bury_totem(self): 
   check_for_dead_player(self): 
   resolve_doors(n, e, s, w): 
   lose_game(self): 
   move_dic(self, direction): 
}
class node7 as "DevCard" {
   event_three: 
   item: 
   charges: 
   event_two: 
   event_one: 
   __init__(self, item, charges, event_one, event_two, event_three): 
   get_event_at_time(self, time): 
   get_item(self): 
   get_charges(self): 
}
class node11 as "Direction" {
   UP: 
   RIGHT: 
   DOWN: 
   LEFT: 
}
class node15 as "IndoorTile" {
   type: 
   __init__(self, name, effect=None, doors=None, x=16, y=16, entrance=None): 
   __repr__(self): 
}
class node5 as "Load" {
   dev_cards(): 
   tiles(): 
}
class node8 as "ZombiesInMyPocket.Model.outdoor_tile.OutdoorTile" {
   type: 
   __init__(self, name, effect=None, doors=None, x=16, y=16, entrance=None): 
   __repr__(self): 
}
class node6 as "Player" {
   has_totem: 
   move_count: 
   attack: 
   x: 
   health: 
   y: 
   items: 
   __init__(self, attack=1, health=6, x=16, y=16, has_totem=False): 
   get_health(self): 
   found_totem(self): 
   get_attack(self): 
   set_attack(self, attack): 
   set_health(self, health): 
   add_health(self, health): 
   add_attack(self, attack): 
   get_items(self): 
   get_item_charges(self, item): 
   set_item_charges(self, item, charge): 
   use_item_charge(self, item): 
   add_item(self, item, charges): 
   remove_item(self, item): 
   set_x(self, x): 
   set_y(self, y): 
   get_x(self): 
   get_y(self): 
   get_move_count(self): 
   set_move_count(self, count): 
   increment_move_count(self): 
}
class node13 as "Tile" {
   doors: 
   effect: 
   name: 
   x: 
   y: 
   entrance: 
   __init__(self, name, x=16, y=16, effect=None, doors=None, entrance=None): 
   set_x(self, x): 
   set_y(self, y): 
   get_x(self): 
   get_y(self): 
   get_name(self): 
   change_door_position(self, idx, direction): 
   get_door_position(self, idx): 
   get_doors(self): 
   get_entrance(self): 
   set_entrance(self, direction): 
   rotate_entrance(self): 
   rotate_tile(self): 
}
class node4 as "Commands" {
   game: 
   prompt: 
   graph: 
   player: 
   intro: 
   __init__(self): 
   do_start(self, line): 
   do_rotate(self, line): 
   do_place(self, line): 
   do_choose(self, direction): 
   do_move(self, line): 
   do_save(self, line): 
   do_load(self, name): 
   do_restart(self, line): 
   do_attack(self, line): 
   do_use(self, line): 
   do_drop(self, item): 
   do_swap(self, line): 
   do_draw(self, line): 
   do_give(self, line): 
   do_give2(self, line): 
   do_run(self, direction): 
   do_cower(self, line): 
   do_search(self, line): 
   do_bury(self, line): 
   do_prompt(self, line): 
   do_exit(self, line): 
   do_status(self, line): 
   do_graph(self, line): 
}
class node12 as "Graph" {
   turn_list: 
   health_list: 
   player: 
   __init__(self): 
   player_health_graph(self): 
}
class node16 as "Cmd" {
   stdin:
   stdout:
   lastcmd:
   intro:
   cmdqueue:
   old_completer:
   completion_matches:
   completekey:
   prompt:
   identchars:
   ruler:
   lastcmd:
   intro:
   doc_leader:
   doc_header:
   misc_header:
   undoc_header:
   nohelp:
   use_rawinput:
   __init__(self, completekey='tab', stdin=None, stdout=None): 
   cmdloop(self, intro=None): 
   precmd(self, line): 
   postcmd(self, stop, line): 
   preloop(self): 
   postloop(self): 
   parseline(self, line): 
   onecmd(self, line): 
   emptyline(self): 
   default(self, line): 
   completedefault(self, *ignored): 
   completenames(self, text, *ignored): 
   complete(self, text, state): 
   get_names(self): 
   complete_help(self, *args): 
   do_help(self, arg): 
   print_topics(self, header, cmds, cmdlen, maxcol): 
   columnize(self, list, displaywidth=80): 
}
class object {
   __doc__: 
   __dict__: 
   __slots__: 
   __module__: 
   __annotations__: 
   __class__(self: _T): 
   __class__(self, __type: Type[object]): 
   __init__(self): 
   __new__(cls: Type[_T]): 
   __setattr__(self, name: str, value: Any): 
   __eq__(self, o: object): 
   __ne__(self, o: object): 
   __str__(self): 
   __repr__(self): 
   __hash__(self): 
   __format__(self, format_spec: str): 
   __getattribute__(self, name: str): 
   __delattr__(self, name: str): 
   __sizeof__(self): 
   __reduce__(self): 
   __reduce_ex__(self, protocol: SupportsIndex): 
   __reduce_ex__(self, protocol: int): 
   __dir__(self): 
   __init_subclass__(cls): 
}
class node2 as "typing.Hashable" {
   __hash__(self): 
}

node10  ^-[#595959,plain]-  object 
node7   ^-[#595959,plain]-  object 
node11  ^-[#595959,plain]-  object 
node15  ^-[#595959,plain]-  object 
node5   ^-[#595959,plain]-  object 
node8   ^-[#595959,plain]-  object 
node6   ^-[#595959,plain]-  object 
node13  ^-[#595959,plain]-  object
node4   ^-[#595959,plain]-  node16 
node12  ^-[#595959,plain]-  object 
node16  ^-[#595959,plain]-  object 
object  ^-[#595959,dashed]-  node2  
@enduml
